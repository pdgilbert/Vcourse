#!/usr/bin/python3

# License GPL 2. Copyright Paul D. Gilbert, 2017

import threading
import signal
import sys
import time
import logging
import json
import gpsd

if True : import LED_simulate  as LEDs # replace with hardware file  FIX
from gpsPos import gpsPos
from distribution import distributionCheck

# start gpsd (-n don't wait for device,  #-S 2947 is default port  FIX?
#sudo gpsd -n -S 2948 /dev/ttyACM0 

gpsd_host="127.0.0.1"
gpsd_port=2948      #2947 is default


#DEBUG, NOTSET, ERROR, WARNING
logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


def zoneSignal(update, shutdown):

    # this try allows recovery after restart, using an already saved file. 
    try :
       with open("BTraceObj.json","r") as f:  raceObj = json.load(f)
       globals().update(raceObj)
       courseLoaded = True
    except:
       courseLoaded = False

    def a(p):
      if dom : a = p.lat - b * p.lng 
      else   : a = p.lng - b * p.lat
      return a

    logging.debug('zoneSignal starting')
    
    gpsd.connect(host=gpsd_host, port=gpsd_port) 

    while True:
        if shutdown.wait(0.01): # blocking for wait time.
           logging.debug('shutting down zoneSignal thread!')
           return() 
        if update.wait(0.01):   # blocking for wait time!
           # read new file here
           logging.debug('updating raceObj')
           with open("BTraceObj.json","r") as f:  raceObj = json.load(f)

           globals().update(raceObj)
           LEDs.update()
 
           #logging.debug('new courseID: %s',  courseID )
           #logging.debug('new course axis:  %f',  axis)
           #logging.debug('new course S %f,%f: ', S[0], S[1])

           courseLoaded = True
           update.clear()
           #logging.debug('update is clear:')
        
        if courseLoaded :
            # run main signal setting loop here
            #logging.debug('in zone?')
            aa = a(gpsPos.getGPS()) # this is a in y = a + b * x
            
            #logging.debug('aa %f', aa)
            # LtoR, # True if bounds increase left to right
             
            if LtoR :
               if   boundL  >  aa            : LEDs.bound('LtoR boundL')
               elif  warnL  >  aa            : LEDs.warn('LtoR warnL')
               elif centerL <= aa <= centerR : LEDs.center('LtoR center')
               elif            aa >   boundR : LEDs.bound('LtoR boundR')
               elif            aa >    warnR : LEDs.warn('LtoR warnR')
               else                          : LEDs.off('LtoR ')
            else :
               if    boundR >  aa            : LEDs.bound('boundR')
               elif   warnR >  aa            : LEDs.warn('warnR')
               elif centerR <= aa <= centerL : LEDs.center('center')
               elif            aa >   boundL : LEDs.bound('boundL')
               elif            aa >    warnL : LEDs.warn('warnL')
               else                          : LEDs.off()

            time.sleep(20)  # REALLY SHORTER  FIX

    logging.debug('zoneSignal should not be here.')

if __name__ == '__main__':
   update   = threading.Event()
   shutdown = threading.Event()

   threading.Thread(name='distributionCheck', 
   		   target=distributionCheck, 
   		   args=(update, shutdown,  10)).start()

   threading.Thread(name='zoneSignal', 
   		   target=zoneSignal, 
   		   args=(update, shutdown)).start()
   

   def shutdownHandler(signum, frame):
       shutdown.set()  # to exit threads
       print('main thread exit.')
       sys.exit()

   signal.signal(signal.SIGINT, shutdownHandler)

   while True: time.sleep(600) # Ctrl+c or kill to exit

