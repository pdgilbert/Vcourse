#!/usr/bin/python3

# License GPL 2. Copyright Paul D. Gilbert, 2017

import threading
import time
import logging
import os.path
import json

from gpsPos import gpsPos

# start gpsd (-n don't wait for device,  #-S 2947 is default port
#sudo gpsd -n -S 2948 /dev/ttyACM0 

gpsd_host="127.0.0.1"
gpsd_port=2948      #2947 is default

#DEBUG, NOTSET, ERROR, WARNING
logging.basicConfig(level=logging.DEBUG,
                    format='(%(threadName)-9s) %(message)s',)


def distributionCheck(update, shutdown, interval):
    logging.debug('distributionCheck starting')
    id = ''
    while True:
        if shutdown.wait(interval):    # effectively sleep too
           logging.debug('shutting down distributionCheck thread.')
           return() 
        # simulate update message from RC by read file
        if os.path.isfile("../raceObj.json"):
           with open("../raceObj.json","r") as f:  raceObj = json.load(f)
           if id != str(raceObj['courseID']) + ' ' + raceObj['distribution time']:
              id  = str(raceObj['courseID']) + ' ' + raceObj['distribution time']
              #logging.debug('new courseID: %s',  id )
              #logging.debug('new course axis:  %f', raceObj['axis'])
              #logging.debug('new course S: ', raceObj[S])
              # Next could be a message to zoneSignal thread, but having a
              # file means the gadget can recover after reboot without
              # a connection to RC, so write to a file
              with open("BTraceObj.json","w") as f: json.dump(raceObj, f, indent=4)
              update.set()
              logging.debug('update is set:')
    logging.debug('distributionCheck should not be here.')

def zoneSignal(update, shutdown):

    import gpsd

    def a(p):
      if dom : a = p.lat - b * p.lng 
      else   : a = p.lng - b * p.lat
      return a

    logging.debug('zoneSignal starting')

    courseLoaded = False
    
    gpsd.connect(host=gpsd_host, port=gpsd_port) 

    while True:
        if shutdown.wait(0.01): # blocking for wait time.
           logging.debug('shutting down zoneSignal thread!')
           return() 
        if update.wait(0.01):   # blocking for wait time!
           # read new file here
           logging.debug('updating raceObj')
           with open("BTraceObj.json","r") as f:  raceObj = json.load(f)

           globals().update(raceObj)
           
           logging.debug('new courseID: %s',  courseID )
           logging.debug('new course axis:  %f',  axis)
           logging.debug('new course S %f,%f: ', S[0], S[1])

           courseLoaded = True
           update.clear()
           logging.debug('update is clear:')
        
        if courseLoaded :
            # run main signal setting loop here
            #logging.debug('in zone?')
            aa = a(gpsPos.getGPS()) # this is a in y = a + b * x
            
            logging.debug('aa %f', aa)
            # LtoR, # True if bounds increase left to right
             
            if LtoR :
               if   boundL  >  aa            : logging.debug('zone  red LtoR boundL')
               elif  warnL  >  aa            : logging.debug('flash red LtoR warnL')
               elif centerL <= aa <= centerR : logging.debug('flash green LtoR center')
               elif            aa >   boundR : logging.debug('zone  red LtoR boundR')
               elif            aa >    warnR : logging.debug('flash red LtoR warnR')
               else                          : logging.debug('no light LtoR ')
            else :
               if    boundR >  aa            : logging.debug('zone  red boundR')
               elif   warnR >  aa            : logging.debug('flash red warnR')
               elif centerR <= aa <= centerL : logging.debug('flash green center')
               elif            aa >   boundL : logging.debug('zone  red boundL')
               elif            aa >    warnL : logging.debug('flash red warnL')
               else                          : logging.debug('no light')

            time.sleep(20)  # REALLY SHORTER

    logging.debug('zoneSignal should not be here.')

if __name__ == '__main__':
    update   = threading.Event()
    shutdown = threading.Event()

    threading.Thread(name='distributionCheck', 
                    target=distributionCheck, 
                    args=(update, shutdown, 10)).start()

    threading.Thread(name='zoneSignal', 
                    target=zoneSignal, 
                    args=(update, shutdown)).start()
    
    import signal

    def handler(signum, frame):
        import sys
        shutdown.set()  # to exit threads
        logging.debug('main thread exit.')
        sys.exit()

    signal.signal(signal.SIGINT, handler)

    while True: time.sleep(600) # Ctrl+c or kill to exit

