#!/usr/bin/python3
# License GPL 2. Copyright Paul D. Gilbert, 2017, 2018
"""
Run by race committee to set the course and distribute to racing boats.

This program needs PYTHONPATH setting to find other modules, e.g.

export PYTHONPATH=/path/to/Vcourse/lib

Configuration for the local course setup is read from RCconfig. 
Configuration for the computer GPS setup is read from GPSconfig. 
A GUI is opened for setting a course and distributing to racing boats.
"""

import threading
import signal
import logging
import time
import tkinter
import sys

import distribution
import RCmanagement

logFormat ='(%(threadName)-9s) %(message)s'
logging.basicConfig(level=logging.DEBUG, format=logFormat,)
#logging.basicConfig(level=logging.INFO, format=logFormat,)


if __name__ == '__main__':
   logging.info('main thread starting. ' +time.strftime('%Y-%m-%d %H:%M:%S %Z'))
   shutdown = threading.Event()

   dr = distribution.distributer(shutdown)
   dr.start() 
   
   race = tkinter.Tk()
   z = RCmanagement.RCmanager(race, dr)

   def abortHandler(signum, frame):
       logging.debug('main thread abortHandler setting shutdown signal.')
       shutdown.set()  # to exit threads
       time.sleep(5)   # wait as long as socket timeout in distributionHandler
       logging.info('main thread exit via abortHandler. ' +time.strftime('%Y-%m-%d %H:%M:%S %Z')+ '\n')
       logging.debug('threads running: ')
       logging.debug(threading.enumerate())
       sys.exit("RC process killed.")

   # ^C works if process is not deamonized with &
   signal.signal(signal.SIGINT,  abortHandler) # ^C, kill -2
   signal.signal(signal.SIGTERM, abortHandler) # kill -15 (default)

   logging.debug(threading.enumerate())

   race.mainloop()

   logging.debug('main thread setting shutdown signal.')
   shutdown.set()  # to exit threads
   time.sleep(5)    # wait as long as socket timeout in distributionHandler
   logging.info('main thread exit via end. ' +time.strftime('%Y-%m-%d %H:%M:%S %Z')+ '\n')
   logging.debug('threads running: ')
   logging.debug(threading.enumerate())
   sys.exit()
