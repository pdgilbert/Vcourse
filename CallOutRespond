#!/usr/bin/python3
# License GPL 2. Copyright Paul D. Gilbert, 2018
"""
Run on BTs gizmo to find gizmo at registration distribution and load BTconfig.

This progam should be set up to start automatically when the LED control
gizmo's system is booted. It needs a setting to find other modules, e.g.

export PYTHONPATH=/path/to/Vcourse/lib

Other configuration can also be done with this utility, but might typically be
done before registration.

Boat specific configuration for the gizmo ("FLEET" and "BT_ID" ) is written to BTconfig.
RC specific configuration ("RC_PORT" and "RC_IP") is also written to BTconfig.
GPS harware specific configuration  is written to GPSconfig.

See CallOut for other details.
"""

import socket
import time
import json
#import logging

import smp
import LEDs 

#logFormat ='(%(threadName)-9s) %(message)s'
#logging.basicConfig(level=logging.DEBUG, format=logFormat,)
#logging.basicConfig(level=logging.INFO, format=logFormat,)

def reportBTconfig() :
   """response to Registation udp broadcast 'report config' """

   BTconfig.update({"hn": hn})   # config + hostname

   try :
       sockTCP = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #TCP
       sockTCP.connect(REG) #Registration IP, port       
       l = smp.snd(sockTCP,  str(BTconfig))    
       print(str(l))
       print(str(BTconfig))
       sockTCP.close()
   except :
       raise Exception('error in reportBTconfig')

   LEDs.ok('green Roger.')         

def restartBT() :
   """
   This restarts the BT program. It is needed in the case where any config files have 
   changed, so that BT loads the new configuration/
   """
   import os 
   import signal 
   import time 
   import sys
   import subprocess

   pidfile = os.getenv("HOME") + '/.BT.pid'

   pid = ['', os.getenv("PWD")] # for case process is not running 

   try:
      with open(pidfile, 'r') as f: pid = f.read().splitlines()
   except:
      print('pid file ' + pidfile+ ' read error. Process probably not running.')

   try:
      os.kill(int(pid[0]), signal.SIGTERM)
      os.remove(pidfile)
      time.sleep(5)
   except:
      print('kill failed. Process probably not running.')
      print('Will attempt to start process in pwd.')

   npid = subprocess.Popen('BT', cwd=pid[1]).pid


def resetBTconfig() :
   """
   This is in response to Registation udp broadcast 'requestBTconfig' which means BT should
   request a new BTconfig from Registation. This is a bit round-about, 
   but otherwise BT needs a TCP listening process.
   """
   BTconfig.update({"hn": hn})  # config + hostname

   try :
       sockTCP = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #TCP
       sockTCP.connect(REG) #Registration IP, port
       print('sending old conf ' + str(BTconfig))
       l  = smp.snd(sockTCP, str(BTconfig))        
       
       cf = eval(smp.rcv(sockTCP) ) # new config  str to dict
       #Next puts hn in echo, but also ensures a received conf does not accidentally
       #cause a changed hn to be recorded in BTconfig. (In theory it would never be
       #used, but is still confusing.)
       cf.update({"hn": hn})
       print('echoing new cf ' + str(cf))
       l  = smp.snd(sockTCP, str(cf))   # echo      
       print('sent echo l= ' + str(l))
       #time.sleep(1)
       sockTCP.close()
   except :
       #return {}
       raise Exception('error in resetBTconfig')
   
   LEDs.ok('green Roger.')         
   return cf

################################################################################

if __name__ == '__main__':
   
   ######## init ########

   LEDs.off('lights out')
   shutdown = False
   
   REG = ("10.42.0.254", 9006) # Registration IP and port, should not be hard coded
   
   sockUDP = socket.socket(socket.AF_INET,   socket.SOCK_DGRAM) # UDP
   sockUDP.bind(('', 5005))  #UDP_IP, PORT
   
   try:     BTconfig = json.load(open('BTconfig'))  
   except : BTconfig = {}  

   # there may be the same boat # in two fleets, but  bt+fl is unique
   bt = BTconfig['BT_ID']
   fl = BTconfig['FLEET']
   btfl = bt + ',' + fl   

   hn = socket.gethostname()

   try:     GPSconfig = json.load(open('GPSconfig')) #Typically "127.0.0.1", 2947 is default port.
   except : GPSconfig = {}                           #This is a problem, but it can be set by broadcast.

   ######## run ########

   while not shutdown:
       # time.sleep(5) misses udp?
       data, addr = sockUDP.recvfrom(1024) # buffer size is 1024 bytes
       data = data.decode()    
       
       data = data.split("::")
       called = data.pop(0)
       request = data[0]
       # in some cases there will be more sections in data
       
       print(data)
       print(called)
       print(request)
       print(str(btfl in called or hn in called ))
       
       if (btfl in called or hn in called ) : 
          # Gizmo specific, not 'all'

          if "checkout" in request :
             LEDs.checkout('blue red green checkout sequence.')         
             LEDs.off('lights out')
             print('doing checkout flash sequence')
          
          elif "checkin" in request :
             LEDs.checkin('red flash.')         
             LEDs.off('lights out')
             print('doing checkin flash')
          
          elif "report config" in request : 
             print('doing reportBTconfig')
             print(str(BTconfig))
             reportBTconfig()
             LEDs.ok('green Roger.')
                
          elif "requestBTconfig" in request :
             #This is a update or reset of the BTconfig.
             cf = resetBTconfig()
             BTconfig.update(cf)
             bt = BTconfig['BT_ID']
             fl = BTconfig['FLEET']
             btfl = bt + ',' + fl
             logging.debug(' about to write BTconfig: ' + str(BTconfig))
             with open('BTconfig', 'w') as f: json.dump(BTconfig, f)
             LEDs.ok('green Roger.')
             restartBT()        
      
       if btfl in called or hn in called or 'all' in called :
          
          if "flash" in request :
             LEDs.ok('green Roger.')         
          
          elif "setRC" in request :
             if 1 < len(data) : # in theory alway true, but otherwise bad broadcasts cause crash
                fl =  data[1]          # from UDP broadcast, not TCP connection
                if fl == BTconfig['FLEET'] :
                   BTconfig.update(eval(data[2]))
                   #logging.debug(BTconfig)
                   with open('BTconfig', 'w') as f: json.dump(BTconfig, f)
                   LEDs.ok('green Roger.')         
                   restartBT()        
          
          elif "setREG" in request :
             #This is using udp broadcast to reset address used for tcp.
             #print(str(data[1]))
             if 1 < len(data) : # in theory alway true, but otherwise bad broadcasts cause crash
               REG = eval(data[1])
               LEDs.ok('green Roger.')         



   # never get here unless shutdown mechanism is activated
   sockUDP.close()

   LEDs.cleanup('clean up for shutdown')
