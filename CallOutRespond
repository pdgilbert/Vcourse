#!/usr/bin/python3
# License GPL 2. Copyright Paul D. Gilbert, 2018
"""
Run on BTs gizmo to find gizmo at registration distribution and load BTconfig.

This progam should be set up to start automatically when the LED control
gizmo's system is booted. It needs a setting to find other modules, e.g.

export PYTHONPATH=/path/to/Vcourse/lib

Other configuration can also be done with this utility, but might typically be
done before registration.

Boat specific configuration for the gizmo ("FLEET" and "BT_ID" ) is written to BTconfig.
RC specific configuration ("RC_PORT" and "RC_IP") is also written to BTconfig.
GPS harware specific configuration  is written to GPSconfig.

See CallOut for other details.
"""

import socket
import time
import json
#import logging

import smp
import LEDs 

#logFormat ='(%(threadName)-9s) %(message)s'
#logging.basicConfig(level=logging.DEBUG, format=logFormat,)
#logging.basicConfig(level=logging.INFO, format=logFormat,)

def reportBTconfig() :
   """response to Registation udp broadcast 'report config' """
   BTconfig.update({"hn": hn})   # config + hostname

   try :
       #time.sleep(5)
       sockTCP = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #TCP
       sockTCP.connect(("10.42.0.254", 9005)) #Registration IP, port       
       l = smp.snd(sockTCP,  str(BTconfig))    
   except :
      raise Exception('error in reportBTconfig')
   finally :
      sockTCP.close()


def requestBTconfig() :
   """
   This is in response to Registation udp broadcast 'requestBTconfig' which means BT should
   request a new BTconfig from Registation. This is a bit round-about, 
   but otherwise BT needs a TCP listening process.
   """
   BTconfig.update({"hn": hn})  # config + hostname

   try :
       sockTCP = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #TCP
       sockTCP.connect(("10.42.0.254", 9005)) #Registration IP, port
       l  = smp.snd(sockTCP, str(BTconfig))        
       cf = eval(smp.rcv(sockTCP) ) # str to dict
       cf.update({"hn": hn})
       l  = smp.snd(sockTCP, str(cf))   # echo      
   except :
      raise Exception('error in requestBTconfig')
   finally :
      sockTCP.close()
   
   return cf

################################################################################

LEDs.off('lights out')

shutdown = False

sockUDP = socket.socket(socket.AF_INET,   socket.SOCK_DGRAM) # UDP
sockUDP.bind(('', 5005))  #UDP_IP, PORT

try:
   BTconfig = json.load(open('BTconfig'))  
except :
   BTconfig = {}  

bt = BTconfig['BT_ID']

hn = socket.gethostname()

try:
   GPSconfig = json.load(open('GPSconfig'))  # typically "127.0.0.1", 2947 is default port
except :
   GPSconfig = {}  
   raise Exception('error GPSconfig is empty!')


while not shutdown:
    # time.sleep(5) misses udp?
    data, addr = sockUDP.recvfrom(1024) # buffer size is 1024 bytes
    data = data.decode()    
    
    data = data.split("::")
    called = data.pop(0)
    request = data[0]
    # in some cases there will be more sections in data
    
    if (bt in called or hn in called ) : 
       # Gizmo specific, not 'all'

       if "checkout" in request :
          LEDs.checkout('blue red green checkout sequence.')         
          LEDs.off('lights out')
          print('doing checkout flash sequence')
       
       elif "checkin" in request :
          LEDs.checkin('red flash.')         
          LEDs.off('lights out')
          print('doing checkin flash')
       
       elif "report config" in request : 
          print('doing reportBTconfig')
          reportBTconfig()
              
       elif "requestBTconfig" in request :
          #This is a complete reset of the BTconfig.
          cf = requestBTconfig()
          BTconfig.update(cf)
          #logging.debug(BTconfig)
          with open('BTconfig', 'w') as f: json.dump(BTconfig, f)
   
    if bt in called or hn in called or 'all' in called :
       
       if "flash" in request :
          # this is checkout flash sequence, but not called by checkout. It could be different
          LEDs.checkout('blue red green checkout sequence.')         
          LEDs.off('lights out')
          print('doing flash')
       
       elif "setRC" in request :
          fl =  data[1]          # from UDP broadcast, not TCP connection
          if fl == BTconfig['FLEET'] :
             BTconfig.update(eval(data[2]))
             #logging.debug(BTconfig)
             with open('BTconfig', 'w') as f: json.dump(BTconfig, f)
       


# never get here unless shutdown mechanism is activated
sockUDP.close()

LEDs.cleanup('clean up for shutdown')
