#!/usr/bin/python3
# License GPL 2. Copyright Paul D. Gilbert, 2018
"""
Registration is run at the registration desk to find gizmo (by flashing LEDs), (re) load BTconfig, 
and distribute fleet info, etc. See the file NOTES.txt for general user documentation.

This program needs a setting to find other modules, e.g.
   export PYTHONPATH=/path/to/Vcourse/lib

Registration uses the same files and file structure as RC for FLEETS/*/BoatList.txt.
Those files should be used by RC when registration is complete.

Internally in the program there is a comparable dict structure (there is boatLists and 
checkedOut for each fleet). fleets will have a sub-dict for each fleet with BoatList 
and checkedOut.
"""

import tkinter
from tkinter import ttk
from tkinter import messagebox

import signal
import logging
import json
import sys # just for exit
import os  # just for mkdir

from GUIutils import *
from CallOut import CallOut

logFormat ='(%(threadName)-9s) %(message)s'
logging.basicConfig(level=logging.DEBUG, format=logFormat,)
#logging.basicConfig(level=logging.INFO, format=logFormat,)

class syncdList():
    """
    Define and maintain a list with txtfile copy on change.
    The purpose of this is to be able to reload values on program restart.
    The values will be a list of unique entries.
    """
    def __init__(self, txtfile):
       self.txtfile  = txtfile
       
       try : 
          with open(self.txtfile) as f:  values =  f.read().splitlines()
          values = [b.strip()  for b in  values]
       except :
          values = []
       
       
       # insure unique sorted values
       values = list(set(values))
       values.sort()
       
       self.values  = values 
    
    def append(self, x) :
       """Add to the list and save."""
       self.values.append(x)
       self.values  = list(set(self.values))
       self.values.sort()
       self._save()
    
    def remove(self, x) :
       """Add to the list and save."""
       self.values  = list(set(self.values)) 
       if x in self.values : self.values.remove(x) # MESSAGE NOT IN??
       self._save()
    
    def _save(self) :
       try : 
          with open(self.txtfile, 'w') as f: 
               for g in self.values : f.write(str(g) + "\n")  # txt lines not json
       except :
          tkWarning("Failed saving " + txtfile)

# test
#   unassignedGizmos = syncdList('unassignedGizmos.txt')   
#   unassignedGizmos.values
#   unassignedGizmos.append('BT-100')
#   unassignedGizmos.remove('BT-100')

#  with open('FleetListRC.json','r') as f: fleets =  json.load(f)
#  fleetList = sorted(fleets.keys())  

#  fl = 'fleet 1'
#  readBoatList(fl)
#  fleets[fl]['BoatList']

#  bl = syncdList('FLEETS/' +fl + '/BoatList.txt') 
#  fleets[fl]['BoatList'] = bl
#  fleets[fl]['BoatList'].values
#  fleets[fl]['BoatList'].append('boat 100')
#  fleets[fl]['BoatList'].remove('boat 100')


##########    Utilities   ########### 

def abortHandler(signum, frame):
    logging.info('main thread exit via abortHandler.')
    sys.exit("RC process killed.")


def BoatList(fl)   : return fleets[fl]['BoatList'].values

def checkedOut(fl) : return fleets[fl]['checkedOut'].values

def showRC(t=None): 
   if t is not None: t.destroy()

   w = tkinter.Toplevel()
   w.wm_title("Fleet Names & RC settings")
   for d in fleetList:
      rc = str({x: fleets[d][x] for x in ('RC_IP', 'RC_PORT')})
      ROW(w, text='%s   %s' % (d, rc), pad=2, width=40)

def setRC(bt): 
   # This is to one bt by UDP !!

   fl =  fleetChoice.get()
   btfl = bt + ',' + fl
   rc =  btfl + "::" + str({x: fleets[fl][x] for x in ('RC_IP', 'RC_PORT')})

   logging.debug(bt)
   logging.debug(rc)
   (bt, fl, conf) =  CallOut(btfl, 'setRC', conf=rc, timeout=20)
   return (bt, conf) 

def setAllRC(t=None): 
   # This is to all boats in all fleets by UDP !!
   if t is not None: t.destroy()

   for fl in fleetList:
      rc =  fl + "::" + str({x: fleets[fl][x] for x in ('RC_IP', 'RC_PORT')})
      logging.debug(rc)
      CallOut('all', 'setRC', conf=rc, timeout=20)

def setREG(t=None): 
   # This is to all by UDP !!
   if t is not None: t.destroy()

   REG = ("10.42.0.254", 9006) # Registration IP and port, should not be hard coded
   CallOut('all', 'setREG', conf=str(REG), timeout=20)

def setBTconfig():   
   """
   This does "requetBTconfig" so BT calls back. 
   It does a complete reset of the gizmo indicated in the GUI using other values 
   as set in the GUI (and RC values for the fleet).
   
   It is important that the gizmo hostname to be reset is in thr GUI, most often by
   a Call Out of a sail #. 
   
   The fleet(s) BoatList is also updated, so this corrects registration files
   and can be used also for the case the gizmo is ok but the (pre-)registration
   information is incorrect.
   
   The callout for "requetBTconfig" will be to a gizmo hostname (BT-#).
   """
   global fleets, status

   hn = gizmo.get()
   bt = sailNumberChoice.get()
   fl = fleetChoice.get()

   nfl =  fleetChoice.get()
   if nfl != fl :                           # update fleet
      fleets[fl]['BoatList'].remove(bt)    
      fleets[nfl]['BoatList'].append(bt)
      fl = nfl  

   cf = {'BT_ID': bt, 'FLEET': fl, 'RC_IP': fleets[fl]['RC_IP'], 'RC_PORT': fleets[fl]['RC_PORT'] }
      
   (bt, fl, conf) = CallOut(hn, "requestBTconfig", conf=cf, timeout=10)
   
   # This is really just a confirmation. If screen values change then something is wrong.
   fleetChoice.set(conf['FLEET'])
   sailNumberChoice.set(conf['BT_ID'])
   gizmo.set(conf['hn'])

   statusSet()

   updateBoatHostMap(bt, hn)

def updateBoatHostMap(bt, hn):
   """
   This is an overall dict, not by fleet, of {hn : bt} which get updated whenever there is a
   checkout or change. There is little attempt to insure accuracy as the list is not really needed,
   but it may be useful if a gizmo  goes missing. Entries are not deleted, only updated, so it
   will remain reasonably accurate even when gizmos are checked in.
   The map should be a bijection, but there is a small risk of duplicate sail numbers in
   different fleets, so hn is used as the key. 
   """
   global fleets
   fleets['BoatHostMap'].update({hn:bt})

   try : 
      with open('BoatHostMap.json', 'w') as f: json.dump(fleets['BoatHostMap'], f, indent=4)
   except :
      logging.info("Registration failed to save BoatHostMap.json." )
      logging.info("BoatHostMap:" )
      logging.info(fleets['BoatHostMap'])

def newBoatSetup(bt, fl, hn, t=None):
   """
   Set BTconfig on an unassigned gizmo  and update files.
   Note args bt, fl come from the new boat dialog, so they need to
   be set in main window.
   """
   global fleets, status
   if t is not None: t.destroy()

   sailNumberChoice.set(bt)
   fleetChoice.set(fl)
   gizmo.set(hn)
   unassignedGizmos.remove(hn)

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nConfiguring new gizmo." % (bt, fl))
   else:
      fleets[fl]['BoatList'].append(bt)
   
   setBTconfig() # uses choices as set above     
   sailNumberChoice['values'] = BoatList(fl)
   
   statusSet()

def rmBoat(bt, fl, t=None):
   """Remove bt, update files and unassign gizmo."""
   global fleets
   if t is not None: t.destroy()

   if bt in BoatList(fl) :
      fleets[fl]['BoatList'].remove(bt)
      sailNumberChoice['values'] = BoatList(fl)
   else :
      tkinter.messagebox.showinfo("%s was not in fleet %s." % (bt, fl))

   r = callForHost(bt+','+fl)

   sailNumberChoice.set('')
   fleetChoice.set('')
   gizmo.set('') 

   if r is None :  # no response
      txt = bt + " gizmo is not responding.\nThe boat is removed from the fleet list\n" + \
            "but the gizmo may still be configured for the boat."
      tkWarning(txt )
      return None  

   hn = r['hn']
   cf = {'BT_ID':'unassigned', 'FLEET':'',  'RC_IP':'' ,  'RC_PORT':''}

   CallOut(hn, "requestBTconfig", conf=cf, timeout=10)
   unassignedGizmos.append(hn)


def statusSet():
   OutLst = checkedOut(fleetChoice.get())
   if sailNumberChoice.get() in OutLst :
          status.set('Out')
   else : status.set('In ')

def chgSail(bt, t=None):
   """Change a boats sail number."""
   global fleets
   if t is not None: t.destroy()
   
   fl = fleetChoice.get()

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nNumber change not allowed." % (bt, fl))
      return None
   else:
      fleets[fl]['BoatList'].remove(sailNumberChoice.get())    
      fleets[fl]['BoatList'].append(bt)

      sailNumberChoice['values'] = BoatList(fl)
      sailNumberChoice.set(bt)
      setBTconfig()        # uses choices as set    

   
def chgFleet(fl, t=None):
   """Change a boats sail number."""
   global fleets
   if t is not None: t.destroy()
   
   bt = sailNumberChoice.get()
   oldfl = fleetChoice.get()

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nFleet change not allowed." % (bt, fl))
      return None
   else:
      fleets[oldfl]['BoatList'].remove(bt)    
      fleets[fl]['BoatList'].append(bt)

      sailNumberChoice['values'] = BoatList(fl)
      fleetChoice.set(fl)
      setBTconfig()        # uses choices as set    



def callForGizmo(callout, t=None):
   if t is not None: t.destroy()
   
   #unset sail# and fleet for case nothing is returned
   sailNumberChoice.set('')
   fleetChoice.set('unknown')
   gizmo.set('unknown')
   status.set('')
   return callForHost(callout) 

def callForBoat(bt, fl):  return callForHost(bt + ',' + fl)

def callForHost(callout): 
   #callout can be gizmo hostname (BT-#)  or bt,fl combination (boat ID and fleet)
   global bt
   (bt, fl, conf) = CallOut(callout, "report config")
   logging.debug(bt)
   logging.debug(conf)
   if conf['hn'] == 'no response' :
      #fleetChoice.set('unknown')
      gizmo.set('unknown')
      status.set('')
      # don't message here. Instead give more detail in the function returned to.
      #tkinter.messagebox.showinfo(bt, "No Response from " + callout)
      return None
   
   fl = conf['FLEET']
   fleetChoice.set(fl)

   bt = conf['BT_ID']
   sailNumberChoice.set(bt)
       
   fIP = fleets[fl]['RC_IP']
   fPT = fleets[fl]['RC_PORT']
   bIP = conf['RC_IP']
   bPT = conf['RC_PORT']

   if fIP != bIP  or  fPT != bPT :
      tkWarning("Boat's IP/PORT was not set to fleet values!\n" +
                "boat:  " + bIP + ":" + bPT + "\n" +
                "fleet: " + fIP + ":" + fPT + "\n" +
                "It is being reset. If the boat values were correct\n" +
                "then reset the fleet values and propogate.", width=45)
      (bt, conf) = setRC(bt)

   # hn is not a standard part of BTconfig, it was added by CallOutRespond()
   gizmo.set(conf['hn']) 
   statusSet()
   return conf


def checkOut(): 
   global fleets
   bt = sailNumberChoice.get()
   fl = fleetChoice.get()

   # This callForBoat is used to discover gizmo hn.
   # When callForBoat used only bt and not fl, it could also discover fl, but that 
   # assumed bt was unique across fleets.

   r = callForBoat(bt, fl)
   if r is None :  return None   # no response
   
   hn = gizmo.get()
   CallOut(hn, "checkout")

   fleets[fl]['checkedOut'].append(bt)    
   updateBoatHostMap(bt,hn)
   statusSet()
   logging.debug('status ' +  status.get())

def checkIn(): 
   global fleets
   bt = sailNumberChoice.get()
   fl = fleetChoice.get()

   logging.debug('in checkIn bt:' + bt)

   # This callForBoat is used to discover gizmo hn.
   # When callForBoat used only bt and not fl, it could also discover fl, but that 
   # assumed bt was unique across fleets.

   r = callForBoat(bt, fl)
   if r is None :  return None  # no response
   logging.debug('in checkIn r:')
   logging.debug(r)

   if bt not in checkedOut(fl): tkWarning("%s was not checkedOut in fleet %s" % (bt,fl))
   fleets[fl]['checkedOut'].remove(bt)

   CallOut(gizmo.get(), "checkin")
   statusSet()
   logging.debug('status ' +  status.get())

def showBoatList(w=None):
   if w is not None: w.destroy() 
   
   fl     = fleetChoice.get()
   BtLst  = BoatList(fl)
   chO    = checkedOut(fl)
   BHMap  = fleets['BoatHostMap']
   
   t = tkinter.Toplevel()
   t.wm_title(fl)
   
   if  0 == len(BtLst) : 
       ROW(t, text='boat list not available for ' + fl, pad=2)
   else : 
      for f in sorted(BtLst) :
         if f  in  chO : out = ' out '
         else          : out = '     '
         gz = str([h for h,b in BHMap.items() if b == f])
         ROW(t, text='%s   %s      %s' % (f, out, gz), pad=2)


def changeFleet():
   # This changes the drop down sail number menu when GUI changes
   # from one fleet to another. It does not change the fleet of a boat.
   sailNumberChoice['values'] = BoatList(fleetChoice.get())
   sailNumberChoice.set('')
   gizmo.set('')
   status.set('')

def changeBoat():
   # This changes the gizmo ID and status in the GUI when the sail# is changed
   gizmo.set('')
   statusSet()

##########   Change a Boat's Fleet  Window   ########### 

def chgFleetWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("New Fleet")

   oldfl = fleetChoice.get()

   row = tkinter.Frame(t)
   tkinter.Label(row, text='For Boat %s change Fleet from %s to: ' % (bt,oldfl), anchor='w').pack(side=tkinter.LEFT)

   e = ttk.Combobox(row, values=fleetList, state="readonly" , width=10 )
   e.pack(side=tkinter.LEFT)
   e.set(oldfl) 

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : chgFleet(e.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########   Change Sail #  Window   ########### 

def chgSailWindow(w=None):
   if w is not None: w.destroy() 

   t = tkinter.Toplevel()
   t.wm_title("New Sail #")

   oldbt = sailNumberChoice.get()

   row = tkinter.Frame(t)
   tkinter.Label(row, text='Change Sail ' + oldbt + ' to: ',   anchor='w').pack(side=tkinter.LEFT)
   e = tkinter.Entry(row, bg = "white", width=10)
   e.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : chgSail(e.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########   New Boat  Window   ########### 

def newBoatWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("New Boat")

   row = tkinter.Frame(t)
   f = ttk.Combobox(row, values=fleetList, state="readonly" , width=10 )
   f.bind("<<ComboboxSelected>>", (lambda event : changeFleet()))
   f.pack(side=tkinter.LEFT)
   f.set(fleetList[0]) 

   tkinter.Label(row, text='New Boat Sail #',   anchor='w').pack(side=tkinter.LEFT)
   b = tkinter.Entry(row, bg = "white", width=10)
   b.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   tkinter.Label(row, text='Assign gizmo:',   anchor='w').pack(side=tkinter.LEFT)
   g = ttk.Combobox(row, values=sorted(unassignedGizmos.values), state="readonly" , width=10)
   g.pack(side=tkinter.LEFT)
   g.set(unassignedGizmos.values[0]) 

   But(row, text="Commit",  
                  command=(lambda : newBoatSetup(b.get(), f.get(), g.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


##########   Remove Boat  Window   ########### 

def removeBoatWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("Remove Boat")

   fl = fleetChoice.get()
   row = tkinter.Frame(t)
   txt = 'Fleet: ' + fl + '    Boat Sail #'
   tkinter.Label(row, text= txt, anchor='w').pack(side=tkinter.LEFT)

   e = ttk.Combobox(row, 
                  values=BoatList(fl), state="readonly" , width=10)
   e.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : rmBoat(e.get(), fl, t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########    More  Window   ########### 

def moreWindow():
   t = tkinter.Toplevel()
   t.wm_title("More Options")

   row = tkinter.Frame(t)
   #But(row,  text="Commit\nchanges",    command=setBTconfig)
   But(row, text="Change\nBoat's Fleet", command=(lambda : chgFleetWindow(t)))
   But(row, text="Change\nBoat's Sail#",command=(lambda : chgSailWindow(t)))
   But(row, text='New Boat',             command=(lambda : newBoatWindow(t)))
   But(row, text='Remove Boat',          command=(lambda : removeBoatWindow(t)))
   But(row, text='extra',                command=(lambda : extraWindow(t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########    Extra  Window   ########### 

def extraWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("Extra Options")

   row = tkinter.Frame(t)
   But(row,  text="Propogate\nRegist. IP",       command=(lambda : setREG(t)) )
   But(row,  text="Show fleets'\nRC settings",   command=(lambda : showRC(t)) )
   But(row,  text="Propogate\nfleet's RC",       command=(lambda : setAllRC(t)) )

   tkinter.Label(row, text= 'Call Out Gizmo:',   anchor='w').pack(side=tkinter.LEFT)
   gz = tkinter.StringVar()
   gzC = ttk.Combobox(row, values=gizmoList.values, textvariable=gz, state="readonly", width=10)
   gzC.bind("<<ComboboxSelected>>", lambda _ : callForGizmo(gz.get(), t)  )
   gzC.pack(side=tkinter.LEFT)

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


if __name__ == '__main__':
   

   ##################  initiate from files    ################

   gizmoList        = syncdList('gizmoList.txt') 
   unassignedGizmos = syncdList('unassignedGizmos.txt')   

   try :
      # This also has RC_IP and port info
      with open('FleetListRC.json','r') as f: fleets =  json.load(f)
   except :
      fleets = {'No fleet': None}
   
   fleetList = sorted(fleets.keys())  
   
   for d in fleetList:
      if not os.path.exists('FLEETS/' + d):  os.makedirs('FLEETS/'+d)
   
   for d in fleetList:
      fleets[d]['BoatList']   = syncdList('FLEETS/' +d+ '/BoatList.txt')

   for d in fleetList:
      fleets[d]['checkedOut'] = syncdList('FLEETS/' +d+ '/checkedOut.txt')


   try :
      with open('BoatHostMap.json') as f:  fleets['BoatHostMap'] = json.load(f)
   except :
      fleets['BoatHostMap'] = {}

   
   ##################  Registration  Main  GUI     ################

   #w = ttk.Style()
   #w.configure("BW.TLabel", foreground="black", background="white")

   w = tkinter.Tk()

   w.wm_title("Gizmo Registration")
   
   row = tkinter.Frame(w)
   fleetChoice = ttk.Combobox(row,
                     values=fleetList, state="readonly" , width=10 )
   fleetChoice.bind("<<ComboboxSelected>>", (lambda event : changeFleet()))
   fleetChoice.pack(side=tkinter.LEFT)
   fleetChoice.set(fleetList[0]) 

   tkinter.Label(row, text= 'Sail #:',   anchor='w').pack(side=tkinter.LEFT)
   sailNumberChoice = ttk.Combobox(row,
                    values=BoatList(fleetList[0]), state="readonly" , width=10)
   sailNumberChoice.bind("<<ComboboxSelected>>", (lambda event : changeBoat()))
   sailNumberChoice.pack(side=tkinter.LEFT)

   But(row, text='Call Out\nBoat', command =
          (lambda : callForHost(sailNumberChoice.get()+','+fleetChoice.get())))

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(w)
   tkinter.Label(row, text= 'Gizmo ID:',      anchor='w').pack(side=tkinter.LEFT)
   gizmo = tkinter.StringVar()
   tkinter.Label(row, textvariable = gizmo,   anchor='w').pack(side=tkinter.LEFT)

   tkinter.Label(row, text= '     Status:',   anchor='w').pack(side=tkinter.LEFT)
   status = tkinter.StringVar()
   tkinter.Label(row, textvariable = status,   anchor='w').pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)
   status.set('')

   row = tkinter.Frame(w)
   But(row,  text='Check Out\nGizmo',       command=checkOut)
   But(row,  text='Check In\nGizmo',        command=checkIn)
   But(row,  text='fleet check-\nOut status', command=showBoatList)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(w)
   But(row, text='more',                command=moreWindow)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


   # ^C works if process is not deamonized with &
   signal.signal(signal.SIGINT,  abortHandler) # ^C, kill -2
   signal.signal(signal.SIGTERM, abortHandler) # kill -15 (default)

   w.mainloop()
   ###############  end  Registration  Main  GUI     ###############


   logging.info('main thread exit via end.')
