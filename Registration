#!/usr/bin/python3
# License GPL 2. Copyright Paul D. Gilbert, 2018
"""
Registration is run at the registration desk to find gizmo (by flashing LEDs), (re) load BTconfig, 
and distribute fleet info, etc. See the file NOTES.txt for general user documentation.

This program needs a setting to find other modules, e.g.
   export PYTHONPATH=/path/to/Vcourse/lib

Registration uses the same files and file structure as RC for FLEETS/*/BoatList.txt.
Those files should be used by RC when registration is complete.

Internally in the program there is a comparable dict structure (there is boatLists and 
checkedOut for each fleet). fleets will have a sub-dict for each fleet with boatList 
and checkedOut, 
 eg: fleets = {'FX': {'BoatList': ('FX 1',), 'checkedOut': None}}
"""

import tkinter
from tkinter import ttk
from tkinter import messagebox

import signal
import logging
import json
import sys # just for exit
import os  # just for mkdir

from GUIutils import *
from CallOut import CallOut

logFormat ='(%(threadName)-9s) %(message)s'
logging.basicConfig(level=logging.DEBUG, format=logFormat,)
#logging.basicConfig(level=logging.INFO, format=logFormat,)


##########    Utilities   ########### 

def abortHandler(signum, frame):
    logging.info('main thread exit via abortHandler.')
    sys.exit("RC process killed.")


def readBoatList(fl, w=None):
   global fleets
   if w is not None: w.destroy()
   
   try : 
      with open('FLEETS/' +fl + '/BoatList.txt') as f: bl = f.read().splitlines()
      bl = [b.strip() for b in bl]
      bl = sorted(bl)
   except :
      bl = []   
   
   logging.debug('BoatList = bl is ' + str(bl))
   fleets[fl].update({'BoatList':bl})

def BoatList(fl) : return fleets[fl]['BoatList']

def showRC(t=None): 
   if t is not None: t.destroy()

   w = tkinter.Toplevel()
   w.wm_title("Fleet Names & RC settings")
   for d in fleetList:
      rc = str({x: fleets[d][x] for x in ('RC_IP', 'RC_PORT')})
      ROW(w, text='%s   %s' % (d, rc), pad=2, width=40)

def setRC(bt): 
   # This is to one bt by UDP !!

   fl =  fleetChoice.get()
   rc =  fl + "::" + str({x: fleets[fl][x] for x in ('RC_IP', 'RC_PORT')})

   logging.debug(bt)
   logging.debug(rc)
   (bt, conf) =  CallOut(bt, 'setRC', conf=rc, timeout=20)
   return (bt, conf) 

def setAllRC(t=None): 
   # This is to all boats in all fleets by UDP !!
   if t is not None: t.destroy()

   for fl in fleetList:
      rc =  fl + "::" + str({x: fleets[fl][x] for x in ('RC_IP', 'RC_PORT')})
      logging.debug(rc)
      CallOut('all', 'setRC', conf=rc, timeout=20)

def setREG(t=None): 
   # This is to all by UDP !!
   if t is not None: t.destroy()

   REG = ("10.42.0.254", 9006) # Registration IP and port, should not be hard coded
   CallOut('all', 'setREG', conf=str(REG), timeout=20)

def setBTconfig():   
   """
   This does "requetBTconfig" so BT calls back. 
   It does a complete reset of the gizmo indicated in the GUI using other values 
   as set in the GUI (and RC values for the fleet).
   
   It is important that the gizmo hostname to be reset is in thr GUI, most often by
   a Call Out of a sail #. 
   
   The fleet(s) BoatList is also updated, so this corrects registration files
   and can be used also for the case the gizmo is ok but the (pre-)registration
   information is incorrect.
   
   The callout for "requetBTconfig" will be to a gizmo hostname (BT-#).
   """
   global fleets, status

   hn = gizmo.get()
   bt = sailNumberChoice.get()
   fl = fleetChoice.get()

   # first correct case where there are duplicates in (pre-registration) boat list
   fleets[fl]['BoatList'] = list(set(BoatList(fl))) 

   writeBoatList(fl)

   nfl =  fleetChoice.get()
   if nfl != fl :                           # update fleet
      fleets[fl]['BoatList'].remove(bt)    
      fleets[nfl]['BoatList'].append(bt)
      writeBoatList(fl)
      writeBoatList(nfl)
      fl = nfl  

   #correct case where duplicate was introduced in new fleet
   fleets[fl]['BoatList'] = list(set(BoatList(fl)))  


   cf = {'BT_ID': bt, 'FLEET': fl, 'RC_IP': fleets[fl]['RC_IP'], 'RC_PORT': fleets[fl]['RC_PORT'] }
   
   logging.debug('about to Callout to hn: ' + hn)
   logging.debug('   Callout "requestBTconfig" cf:')
   logging.debug(str(cf))
   
   (bt, conf) = CallOut(hn, "requestBTconfig", conf=cf, timeout=10)
   
   # This is really just a confirmation. If screen values change then something is wrong.
   fleetChoice.set(conf['FLEET'])
   sailNumberChoice.set(conf['BT_ID'])
   gizmo.set(conf['hn'])

   statusSet()
   logging.debug(status)

   updateBoatHostMap(bt, hn)

def updateBoatHostMap(bt, hn):
   """
   This is an overall dict, not by fleet, of {hn : bt} which get updated whenever there is a
   checkout or change. There is little attempt to insure accuracy as the list is not really needed,
   but it may be useful if a gizmo  goes missing. Entries are not deleted, only updated, so it
   will remain reasonably accurate even when gizmos are checked in.
   The map should be a bijection, but there is a small risk of duplicate sail numbers in
   different fleets, so hn is used as the key. 
   """
   global fleets
   fleets['BoatHostMap'].update({hn:bt})

def newBoatSetup(bt, fl, hn, t=None):
   """
   Set BTconfig on an unassigned gizmo  and update files.
   Note args bt, fl come from the new boat dialog, so they need to
   be set in main window.
   """
   global fleets, status
   if t is not None: t.destroy()

   sailNumberChoice.set(bt)
   fleetChoice.set(fl)
   gizmo.set(hn)
   unassignedGizmos.remove(hn)
   writeUnassignedGizmos()

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nConfiguring new gizmo." % (bt, fl))
   else:
      fleets[fl]['BoatList'].append(bt)
   
   #MAY NEED TO FIND DUPLICATE GIZMOS FOR A BOAT?

   setBTconfig() # uses choices as set above     
   writeBoatList()
   sailNumberChoice['values'] = BoatList(fl)
   
   statusSet()

def rmBoat(bt, fl, t=None):
   """Remove bt, update files and unassign gizmo."""
   global fleets
   if t is not None: t.destroy()

   if bt in BoatList(fl) :
      fleets[fl]['BoatList'].remove(bt)
      writeBoatList()
      sailNumberChoice['values'] = BoatList(fl)
   else :
      tkinter.messagebox.showinfo("%s was not in fleet %s." % (bt, fl))

   sailNumberChoice.set('')
   fleetChoice.set('')
   gizmo.set('') 

   # now unassign gizmo

   r = callForHost(bt)

   if r is None :  # no response
      tkinter.messagebox.showinfo(bt +" gizmo is not responding. Gizmo unassignment not done." )
      return None  

   hn = r['hn']
   cf = {'BT_ID':'unassigned', 'FLEET':'',  'RC_IP':'' ,  'RC_PORT':''}

   logging.debug('in rmBoat about to Callout to hn: ' +  hn)   
   CallOut(hn, "requestBTconfig", conf=cf, timeout=10)
   unassignedGizmos.append(hn)
   writeUnassignedGizmos()



def statusSet():
   fl = fleetChoice.get()
   OutLst = fleets[fl]['checkedOut' ] 
   if sailNumberChoice.get() in OutLst :
          status.set('Out')
   else : status.set('In ')

def chgSail(bt, t=None):
   """Change a boats sail number."""
   global fleets
   if t is not None: t.destroy()
   
   fl = fleetChoice.get()

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nNumber change not allowed." % (bt, fl))
      return None
   else:
      fleets[fl]['BoatList'].remove(sailNumberChoice.get())    
      fleets[fl]['BoatList'].append(bt)
      writeBoatList(fl)

      sailNumberChoice['values'] = BoatList(fl)
      sailNumberChoice.set(bt)
      setBTconfig()        # uses choices as set    

   
def chgFleet(fl, t=None):
   """Change a boats sail number."""
   global fleets
   if t is not None: t.destroy()
   
   bt = sailNumberChoice.get()
   oldfl = fleetChoice.get()

   if bt in BoatList(fl): 
      tkWarning("%s is already in fleet %s\nFleet change not allowed." % (bt, fl))
      return None
   else:
      fleets[oldfl]['BoatList'].remove(bt)    
      fleets[fl]['BoatList'].append(bt)
      writeBoatList(oldfl)
      writeBoatList(fl)

      sailNumberChoice['values'] = BoatList(fl)
      fleetChoice.set(fl)
      setBTconfig()        # uses choices as set    


def writeUnassignedGizmos():
   """
   Save file copy for reload when restarted.
   Used when gizmo is changed (by newBoatSetup, rmBoat)
   """

   try : 
      with open('unassignedGizmos.txt', 'w') as f: 
               for gz in unassignedGizmos : f.write(str(gz) + "\n")  # txt lines not json
   except :
      logging.info("Registration failed saving unassignedGizmos.txt.")


def writeBoatList(fl = None):
   """
   Save file copy for reload when restarted.
   Used when BoatList is changed (by newBoatSetup, fleet change or Sail # change)
   """

   if fl is None : fl =fleetChoice.get()

   try : 
      with open('FLEETS/' +fl + '/BoatList.txt', 'w') as f: 
               for bt in BoatList(fl) : f.write(str(bt) + "\n")  # txt lines not json
   except :
      logging.info("Registration failed saving BoatList.txt for " + fl)


def writeCheckedOutList(fl):
   """
   Save file copy for reload when restarted.
   Used when a gizmo is checked in or out
   """

   checkedOut   =  fleets[fl]['checkedOut']
   BoatHostMap  =  fleets['BoatHostMap']

   try : 
      with open('FLEETS/' +fl + '/checkedOut.txt', 'w') as f: 
               for bt in checkedOut : f.write(str(bt) + "\n")   # txt lines not json
   except :
      logging.info("Registration failed saving checkedOut.txt for " + fl)

   try : 
      with open('BoatHostMap.json', 'w') as f: json.dump(BoatHostMap, f, indent=4)
   except :
      logging.info("Registration failed saving BoatHostMap.json." )


def callForHostG(callout, t=None):
   if t is not None: t.destroy()
   
   #unset sail# and fleet for case nothing is returned
   sailNumberChoice.set('')
   fleetChoice.set('unknown')
   gizmo.set('unknown')
   status.set('')
   callForHost(callout) 

def callForHost(callout): 
   #callout can be gizmo hostname (BT-#)  or boat ID (sail #)
   global bt
   bt = sailNumberChoice.get()
   (bt, conf) = CallOut(callout, "flash, report config")
   logging.debug(bt)
   logging.debug(conf)
   if conf['hn'] == 'no response' :
      #fleetChoice.set('unknown')
      gizmo.set('unknown')
      status.set('')
      tkinter.messagebox.showinfo(bt, "No Response from " + callout)
      return None
   
   fl = conf['FLEET']
   fleetChoice.set(fl)

   sailNumberChoice.set(bt)
   
   #logging.debug('fleets')
   #logging.debug(fleets)
    
   fIP = fleets[fl]['RC_IP']
   fPT = fleets[fl]['RC_PORT']
   bIP = conf['RC_IP']
   bPT = conf['RC_PORT']

   if fIP != bIP  or  fPT != bPT :
      tkWarning("Boat's IP/PORT was not set to fleet values!\n" +
                "boat:  " + bIP + ":" + bPT + "\n" +
                "fleet: " + fIP + ":" + fPT + "\n" +
                "It is being reset. If the boat values were correct\n" +
                "then reset the fleet values and propogate.", width=45)
      (bt, conf) = setRC(bt)

   # hn is not a standard part of BTconfig, it was added by CallOutRespond()
   gizmo.set(conf['hn']) 
   statusSet()
   logging.debug('in callForHost')
   logging.debug(conf['hn'])
   logging.debug(status.get())
   return conf


def checkOut(): 
   global fleets
   bt = sailNumberChoice.get()

   # This callForHost is for the case 'CheckOut' is clicked with just the Sail# entered.
   # It ensures BT's values are set properly in GUI and then into fleets['checkedOut'].
   r = callForHost(bt)
   if r is None :  return None   # no response
   
   fl = fleetChoice.get()
   hn = gizmo.get()
   logging.debug(hn)

   logging.debug('checkedOut:' + str(fleets[fl]['checkedOut']))

   if bt not in fleets[fl]['checkedOut'] :
      fleets[fl]['checkedOut'  ] = fleets[fl]['checkedOut']   + [bt,]
    
   updateBoatHostMap(bt,hn)
   
   logging.debug('checkedOut:' +  str(fleets[fl]['checkedOut']))
   logging.debug('BoatHostMap' +  str(fleets['BoatHostMap']))
   writeCheckedOutList(fl)
   CallOut(bt, "checkout")
   statusSet()
   logging.debug('status ' +  status.get())

def checkIn(): 
   global fleets
   bt = sailNumberChoice.get()

   # This callForHost is for the case 'CheckIn' is clicked with just the Sail# entered.
   # It ensures BT's values are set properly in GUI and then into fleets['checkedOut'].
   r = callForHost(bt)
   if r is None :  return None  # no response

   fl = fleetChoice.get()
   logging.debug(bt + " " + fl)
   checkedOut = fleets[fl]['checkedOut']
   logging.debug(str(checkedOut))
   if bt not in checkedOut: tkWarning("%s was not checkedOut in fleet %s" % (bt,fl))

   fleets[fl]['checkedOut'] = [x for x in checkedOut if x != bt]
   logging.debug('checkedOut:' + str(fleets[fl]['checkedOut']))
   writeCheckedOutList(fl)
   CallOut(bt, "checkin")
   statusSet()

def showBoatList(w=None):
   if w is not None: w.destroy() 
   
   fl     = fleetChoice.get()
   BtLst  = BoatList(fl)
   chO    = fleets[fl]['checkedOut']
   BHMap  = fleets['BoatHostMap']
   
   t = tkinter.Toplevel()
   t.wm_title(fl)
   
   if  0 == len(BtLst) : 
       ROW(t, text='boat list not available for ' + fl, pad=2)
   else : 
      for f in sorted(BtLst) :
         if f  in  chO : out = ' out '
         else          : out = '     '
         gz = str([h for h,b in BHMap.items() if b == f])
         ROW(t, text='%s   %s      %s' % (f, out, gz), pad=2)


def changeFleet():
   # This changes the drop down sail number menu, not the fleet of a boat
   sailNumberChoice['values'] = fleets[fleetChoice.get()]['BoatList']
   sailNumberChoice.set('')

##########   Change a Boat's Fleet  Window   ########### 

def chgFleetWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("New Fleet")

   oldfl = fleetChoice.get()

   row = tkinter.Frame(t)
   tkinter.Label(row, text='For Boat %s change Fleet from %s to: ' % (bt,oldfl), anchor='w').pack(side=tkinter.LEFT)

   e = ttk.Combobox(row, values=fleetList, state="readonly" , width=10 )
   e.pack(side=tkinter.LEFT)
   e.set(oldfl) 

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : chgFleet(e.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########   Change Sail #  Window   ########### 

def chgSailWindow(w=None):
   if w is not None: w.destroy() 

   t = tkinter.Toplevel()
   t.wm_title("New Sail #")

   oldbt = sailNumberChoice.get()

   row = tkinter.Frame(t)
   tkinter.Label(row, text='Change Sail ' + oldbt + ' to: ',   anchor='w').pack(side=tkinter.LEFT)
   e = tkinter.Entry(row, bg = "white", width=10)
   e.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : chgSail(e.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########   New Boat  Window   ########### 

def newBoatWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("New Boat")

   row = tkinter.Frame(t)
   f = ttk.Combobox(row, values=fleetList, state="readonly" , width=10 )
   f.bind("<<ComboboxSelected>>", (lambda event : changeFleet()))
   f.pack(side=tkinter.LEFT)
   f.set(fleetList[0]) 

   tkinter.Label(row, text='New Boat Sail #',   anchor='w').pack(side=tkinter.LEFT)
   b = tkinter.Entry(row, bg = "white", width=10)
   b.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   tkinter.Label(row, text='Assign gizmo:',   anchor='w').pack(side=tkinter.LEFT)
   g = ttk.Combobox(row, values=unassignedGizmos, state="readonly" , width=10)
   g.pack(side=tkinter.LEFT)
   g.set(unassignedGizmos[0]) 

   But(row, text="Commit",  
                  command=(lambda : newBoatSetup(b.get(), f.get(), g.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


##########   Remove Boat  Window   ########### 

def removeBoatWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("Remove Boat")

   row = tkinter.Frame(t)
   c = ttk.Combobox(row, values=fleetList, state="readonly" , width=10 )
   c.bind("<<ComboboxSelected>>", (lambda event : changeFleet()))
   c.pack(side=tkinter.LEFT)
   c.set(fleetList[0]) 

   tkinter.Label(row, text='Boat Sail #',   anchor='w').pack(side=tkinter.LEFT)
   e = ttk.Combobox(row, 
                  values=fleets[c.get()]['BoatList'], state="readonly" , width=10)
   e.pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(t)
   But(row, text="Commit", command=(lambda : rmBoat(e.get(), c.get(), t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########    More  Window   ########### 

def moreWindow():
   t = tkinter.Toplevel()
   t.wm_title("More Options")

   row = tkinter.Frame(t)
   #But(row,  text="Commit\nchanges",    command=setBTconfig)
   But(row, text="Change\nBoat's Fleet", command=(lambda : chgFleetWindow(t)))
   But(row, text="Changee\nBoat's Sail#",command=(lambda : chgSailWindow(t)))
   But(row, text='New Boat',             command=(lambda : newBoatWindow(t)))
   But(row, text='Remove Boat',          command=(lambda : removeBoatWindow(t)))
   But(row, text='extra',                command=(lambda : extraWindow(t)))
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

##########    Extra  Window   ########### 

def extraWindow(w=None):
   if w is not None: w.destroy() 
   t = tkinter.Toplevel()
   t.wm_title("Extra Options")

   row = tkinter.Frame(t)
   But(row,  text="Propogate\nRegist. IP",       command=(lambda : setREG(t)) )
   But(row,  text="Show fleets'\nRC settings",   command=(lambda : showRC(t)) )
   But(row,  text="Propogate\nfleet's RC",       command=(lambda : setAllRC(t)) )
   But(row,  text='Re-read\nBoatList')

   tkinter.Label(row, text= 'Call Out Gizmo:',   anchor='w').pack(side=tkinter.LEFT)
   gz = tkinter.StringVar()
   gzC = ttk.Combobox(row, values=gizmoList, textvariable=gz, state="readonly", width=10)
   gzC.bind("<<ComboboxSelected>>", lambda _ : callForHostG(gz.get(), t)  )
   gzC.pack(side=tkinter.LEFT)

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


if __name__ == '__main__':
   

   ##################  initiate from files    ################

   try :
      # This also has RC_IP and port info
      with open('FleetListRC.json','r') as f: fleets =  json.load(f)
   except :
      fleets = {'No fleet': None}
   
   fleetList = sorted(fleets.keys())  
   
   #logging.debug('fleetList:')
   #logging.debug(fleetList)
   
   if not os.path.exists('FLEETS'):  os.makedirs('FLEETS')

   try : 
      with open("gizmoList.txt") as f:  gizmoList =  f.read().splitlines()
      gizmoList = [b.strip() for b in gizmoList]
   except :
      gizmoList = ['No gizmos',]
   
   #logging.debug('gizmoList:')
   #logging.debug(gizmoList)

   try : 
      with open("unassignedGizmos.txt") as f:  unassignedGizmos =  f.read().splitlines()
      unassignedGizmos = [b.strip()  for b in  unassignedGizmos]
   except :
      unassignedGizmos = ['No gizmos',]
   


   for d in fleetList:
      fleets[d].update({'BoatList':()})
      readBoatList(d) 

   for d in fleetList:
      try : 
         with open("checkedOut.txt") as f: bl = f.read().splitlines()
         fleets[d]['checkedOut'] =  [b.strip() for b in bl]
      except :
         fleets[d]['checkedOut']  = []


   try :
      with open('BoatHostMap.json') as f:  fleets['BoatHostMap'] = json.load(f)
   except :
      fleets['BoatHostMap'] = {}

   logging.debug('fleets:')
   logging.debug(fleets)

   #logging.debug('fleets[FX][RC_IP]')
   #logging.debug(fleets['FX']['RC_IP'])

   
   ##################  Registration  Main  GUI     ################

   #w = ttk.Style()
   #w.configure("BW.TLabel", foreground="black", background="white")

   w = tkinter.Tk()

   w.wm_title("Gizmo Registration")
   
   row = tkinter.Frame(w)
   fleetChoice = ttk.Combobox(row,
                     values=fleetList, state="readonly" , width=10 )
   fleetChoice.bind("<<ComboboxSelected>>", (lambda event : changeFleet()))
   fleetChoice.pack(side=tkinter.LEFT)
   fleetChoice.set(fleetList[0]) 

   tkinter.Label(row, text= 'Sail #:',   anchor='w').pack(side=tkinter.LEFT)
   sailNumberChoice = ttk.Combobox(row,
                    values=fleets[fleetList[0]]['BoatList'], state="readonly" , width=10)
   sailNumberChoice.pack(side=tkinter.LEFT)

   But(row, text='Call Out\nBoat',
                      command=(lambda : callForHost(sailNumberChoice.get())))

   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(w)
   tkinter.Label(row, text= 'Gizmo ID:',      anchor='w').pack(side=tkinter.LEFT)
   gizmo = tkinter.StringVar()
   tkinter.Label(row, textvariable = gizmo,   anchor='w').pack(side=tkinter.LEFT)

   tkinter.Label(row, text= '     Status:',   anchor='w').pack(side=tkinter.LEFT)
   status = tkinter.StringVar()
   tkinter.Label(row, textvariable = status,   anchor='w').pack(side=tkinter.LEFT)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)
   status.set('')

   row = tkinter.Frame(w)
   But(row,  text='Check Out\nGizmo',       command=checkOut)
   But(row,  text='Check In\nGizmo',        command=checkIn)
   But(row,  text='fleet check-\nOut list', command=showBoatList)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)

   row = tkinter.Frame(w)
   But(row, text='more',                command=moreWindow)
   row.pack(side=tkinter.TOP, fill=tkinter.X, padx=5, pady=5)


   # ^C works if process is not deamonized with &
   signal.signal(signal.SIGINT,  abortHandler) # ^C, kill -2
   signal.signal(signal.SIGTERM, abortHandler) # kill -15 (default)

   w.mainloop()
   ###############  end  Registration  Main  GUI     ###############


   logging.info('main thread exit via end.')
