########## General and user notes are in this file.                  ##########
########## Code development notes are in DevelopmentNotes.txt.       ##########
########## Common OS setup (development) notes are in OSsetup.txt    ##########
########## Raspbian and Raspberry Pi setup notes are in Raspbian.txt ##########
########## Armbian and Orange Pi setup notes are in Armbian.txt      ##########
########## GPS notes are in gpsNotes.txt                             ##########
########## Venue specific details are in venue files (not on github) ##########

############################ Overview ############################

RC refers to Race Committee. The program RC runs on a computer (laptop) on the race
committee (signal) boat. This computer could also run a wifi hotspot for boats to connect,
but here are better options for the wifi. The RC program has a graphical interface.

BT refers to a boat. The program BT runs on a "computer on a chip" (e.g. Raspberry 
Pi Zero W) which has LEDs for signalling sailors. It needs to be
configured to connect to the wifi hotspot and contact the RC. The only
interface used by the sailors is the LEDs. For lack of a better name, this
device is sometimes refered to as a gizmo. The gizmo has a hostname associated with
it, typically BT-# with "#" replaced by a number. When configured it also has
a boat identifier (sail number) associated with it.

Registration refers to the process of configuring gizmos, assigning them to boats,
and checking them out and in each day. The program Registration runs on a computer at 
the regatta registration desk. It has a graphical interface.

BT, RC  and Registration programs need a path to the program lib:
   export PYTHONPATH=/path/to/Vcourse/lib


############################ BT User notes ############################

For the sailor, the BT (boat gizmo) should be completely automated. Power-up 
and it works. However, some configuration will be necessary before the sailor
gets the gizmo:

-The battery needs to be charged (every night).

-At the start of the regatta the /home/bt/BTconfig  file needs adjustment to

    o identify each boat 

    o the boat's fleet 

    o the RC host IP address and port
    
 For example

   {"RC_IP": "10.42.0.254", "RC_PORT": "9001", "FLEET": "fleet 1", "BT_ID": "boat1"}

 where the boat identifier string "boat 1" could be replaced by a sail number and 
 "fleet 1" by a class name. The fleet string must correspond to the fleet name as 
 specified in the RC configuration file FleetList.txt. The boat identifier string 
 should be as specified in the RC configuration file BoatList.txt.
 The RC IP address and port need to correspond to those set in RCconfig and the wifi.

-At the start of the regatta the BTconfig  must be set to match RCconfig 
    for RC host IP and port.

-The gizmo configuration needs the proper wifi ssid  and psk (password). This will 
   need to be fixed if the wifi details change.

See OSsetup.txt, Raspian.txt/Armbian.txt  for details on building gizmos.



############################ RC User notes ############################

-RC will look for various configuration files (some json dict) in the RC 
  startup directory:

    o FleetList.txt for the list of fleet names. (text, one fleet name per line)

    o RCconfig for RC host IP address and port. The host IP address should be the 
      one available to BTa by wifi. RCconfig must match BTconfig for RC host IP 
      and port. Example:
         {"RC_IP": "10.42.0.254", "RC_PORT": 9001}

    o GPSconfig (optional) for GPS host and port .  Example:
         {"GPS_HOST": "127.0.0.1",  "GPS_PORT": 2947}
      If the GPS is not accessible then automatic GPS position of RC will not 
      be available.

    o gpsList.txt (optional) with lines of 3-tuples for each GPS that might be 
      accessed on the network. "extra > other GPS" in the RC panel will then use
      this list to try to obtain GPS positions over the network. The lines in the 
      file have lines with an arbitrary name, hostID, and port, separated by 
      spaces, for example
           RC    127.0.0.1    2948
           pin   10.42.0.250  2947
           M1    10.42.0.251  2947
      (gdps can be used to contact remote devices and serve them from a local 
      deamon. I have had better luck with that appoach. See gpsNotes.txt.)


 If it does not already exist, a directory FLEETS/ will be created with 
 subdirectories for each fleet listed in FleetList.txt. These directories will be
 checked for files:

    o BoatList.txt a text file with one boat identifier per line (i.e. sail number).
      Each boat identifier should be exactly as indicated in the BTconfig "BT_ID". 
      "Update Status" in the RC panel uses this list to indicate boats which have 
      not received course updates, so if the file does not exist then it will only be
      possible to see what boats have received a zoneObj update (new course / change 
      of course) but it will be impossible to know which ones do not have the update.

    o activeBTzoneObj.json with the zoneObj which was last active. This is primarily 
        for the case of recovery when the RC program is restarted for some reason.
        (The BTs check against this to know if they need a new course.)

    o active.raceParms  with the last active race parameters (on the RC management
      screen) for each fleet. These may not have been distributed and this is only
      for convenience in the case the RC program is restarted for some reason.

The directory FLEETS/ also contains a subdirectory DISTRIBUTEDZONES/ with the historical
record of distributed zoneObj.json files.
    

-My USB GPS dongle seems to be relatively "plug and play" for getting 
   RC GPS. If there are problems, considerations are the same as for BT. See
   gpsNotes.txt and OSsetup.txt for more details on that.
   
-See gpsNotes.txt regarding using GPS2Net on a phone to provide GPS for RC.
  (The phone needs to have real GPS. I have only tested on Android.)

-If RC is mobile (not anchored) the "get RC GPS" button can be used and the 
  RC position copy and pasted. This could be useful, for example, to find the
  actual start line center, rather than that calculated using assumed RC
  position at the starboard end of the line.


-Fleet, description, and target start time are purely descriptive, but parts are used in saved files of distributed courses. 

-The start line length, stadium width, , warning width, and center width must
all be specified.

-Other fields can all be specified, or some calculated on the basis of others
in one of three ways:

   If start line center and mark 1 are specied then other fields can be
    calculated by clicking "calc using start center & mark",
   
   If RC and mark 1 are specied then other fields can be
    calculated by clicking "calc using RC & mark",
   
   If RC, axis, and course length are specied then other fields can be
    calculated by clicking "calc using RC & axis",

-"distribute" distributes the fields as they appear, no additional calculation
  of the displayed fields is done, so all calculations should be done before
  clicking "distribute". Boats will be updated with the new course when they
  contact the RC, and the update will be indicated by flashing red and 
  green  lights. This can be used at the start of a race or for a course change.
  

A boat moving at 10 knots => 5.1 m/s.  Reading gps about 8 times/s => almost a
  meter between readings, more at higher speeds.
  So, adjust border warning widths accordingly.

0.00001 degrees latitude is approximately a meter.


-ADD MORE NOTES ABOUT SETTING AND DISTRIBUTING THE RACE ZONE INFO.


##################### Registration User notes #########################

-ADD MORE NOTES ABOUT TYPICAL REGISTRATION STEPS.

-The Registration program will look for various configuration files (some json)
 in the Registration startup directory:

    o FleetListRC.json for the list of fleet names with associated RC IP and port
      information for each fleet. This is a different structure from the RC file 
      fleetList.txt, but it is important that the fleet names are the same in 
      both files. DOES THIS NEED TO BE MANUALLY CREATED?

    o A directory FLEETS/ with a subdirectories for each fleet. These directories 
      should each have a file BoatList.txt as described above for RC. These files
      should be created using pre-registration information if that exists.
      Registration uses the same file structure as RC for FLEETS/*/BoatList.txt. 
      The Registration program will modify the files if new boats are added, 
      sail numbers changed, or boats moved between fleets. 
      These files should be used by RC when registration is complete.

    o The file gizmoList.txt with one gizmo hostname per line. This file will not
      change unless hardware gizmos are added or removed.

    o The Registration program will record check out/in information in a file 
      checkedOut.txt in each fleet directory. This is created and used 
      internally by the program.
      
-Configuration of gizmos is done with this utility, but much might typically be
done before registration begins, using pre-registration information. 
The program does

  -Boat specific configuration for the gizmo ("FLEET" and "BT_ID" ).
  -RC specific configuration ("RC_PORT" and "RC_IP").
  -GPS hardware specific configuration.


