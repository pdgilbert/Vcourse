RC refers to Race Committee. The program stadiumRC runs on a computer (laptop)
which can also run a wifi hotspot for boats to connect. (There are other options
for the wifi.) It has a graphical interface.

BT refers to a boat. The program stadiumBT runs on a Raspberry Pi Zero 
"computer on a chip" which has LEDs for signalling sailors. It needs to be
configured to connect to the wifi hotspot and contact the RC. The only
interface used by the sailors is the LEDs.

########## To Do notes  ##########
-clean up these notes

-check BT is robust against starting up with no fix (ie inside)

-running more than one course at a time needs more thought. Might start by adding fleet to raceObj and distributed course file name.

-mounting mechanism for cases
-check cases are waterproof

-starting  stadiomRC seems to distribute a course (gizmos signal new course)

-stadiumRC does not shutdown gracefully if no BTs connect

-make stadiumBT more robust against GPS failure (so it keeps 
going if GPS returns).

-is occassional segfault fixed? 
-segfault if GPS is disconnected? 

-automation of boat id on all gizmos would be nice (and RC IP and port).

-unit testing

-transfer tracks back to RC
-tracks in local time (optional?) rather than UTC, but this seems to be a
 problem since time comes from GPS not computer clock.
 
-reorganize raceparms as a class

-consider whether a local DNS would simplify configuration. (The IP address
  for RC now needs to be configured in each BT, and changes if wifi changes.)

-need course change distribution from pin and from M1, as well as RC
-consider setting up AP on a router
-consider ad hoc / mesh network
-consider hardware and case alternatives

########## BT User notes ##########

For the sailor, the BT (boat gizmo) should be completely automated. Power-up 
and it works. However, some configuration will be necessary before the sailor
gets the gizmo:
 -the battery needs to be charged (every night).
 -(at the start of the regatta) the /home/bt/BTconfig file needs a setting 
    to identify each boat 
    eg, "BT_ID": "boat 1"
    where "boat 1" could be replaced by a sail number

 -(at the start of the regatta) the BTconfig  must be set to match RCconfig 
    for RC host IP and port.

 -the file /etc/wpa_supplicant/wpa_supplicant.conf needs the proper wifi ssid
   and psk (password). This will need to be fixed if the wifi details change.

See PiZeroWnotes.txt for details on building the gizmo and wpa_supplicant file.

########## RC User notes ##########

-RC configuration for GPS and host:port are in file RCconfig (in the stadiumRC
  startup directory). Note that RCconfig must match BTconfig for RC host IP 
  and port. The host IP address will be affected by wifi settings.

-RC default course settings are in file defaultRace (in the stadiumRC 
  startup directory)

-If a file BoatList exists (in the stadiumRC startup directory) it should have
  a line for each boat identifier, exactly as indicated in the BTconfig "BT_ID".
  "Update Status" in the RC panel will then use this list to indicate boats 
  which have not received course updates.

-If a file gpsList exists (in the stadiumRC startup directory) it should have
  lines of 3-tuples for each GPS that might be accessed on the network.
  "extra > other GPS" in the RC panel will then use this list to try to obtain 
  gps fixes over the network. The lines in the file have a name, hostID, and
  port, separated by spaces, for example
    RC    127.0.0.1    2948
    pin   10.42.0.250  2947
    M1    10.42.0.251  2947
  (gdps can be used to contact remote devices and serve them from a local 
   deamon. I have had better luck with that appoach. See gpsNotes.txt.)

-My USB GPS dongle seems to be relatively "plug and play" for getting 
   RC GPS. If there are problems, considerations are the same as for BT. See
   PiZeroWnotes.txt for more details on that.
   
-See gpsNotes.txt regarding using GPS2Net on a phone to provide GPS for RC.
  (The phone needs to have real GPS and I have only tested on Android.)

-If RC is mobile (not anchored) the "get RC GPS" button can be used and the 
  RC position copy and pasted. This could be useful, for example, to find the
  actual start line center, rather than that calculated using assumed RC
  position at the starboard end of the line.

-distributed raceObj are recorded in distributedCourses/

-ADD SOME NOTES ABOUT SETTING AND DISTRIBUTING THE RACE INFO.

-Fleet, description, and target start time are purely descriptive, but parts are used in saved files of distributed courses. Course type might be used sometime.

-The start line length, stadium width, , warning width, and center width must
all be specified.

-Other fields can all be specified, or some calculated on the basis of others
in one of three ways:

   If start line center and mark 1 are specied then other fields can be
    calculated by clicking "calc using start center & mark",
   
   If RC and mark 1 are specied then other fields can be
    calculated by clicking "calc using RC & mark",
   
   If RC, axis, and course length are specied then other fields can be
    calculated by clicking "calc using RC & axis",

-"distribute" distributes the fields as they appear, no additional calculation
  of the displayed fields is done, so all calculations should be done before
  clicking "distribute". Boats will be updated with the new course when they
  contact the RC, and the update will be indicated by flashing red and 
  green  lights. This can be used at the start of a race or for a course change.
  

A boat moving at 10 knots => 5.1 m/s.  Reading gps about 8 times/s => almost a
  meter between readings, more at higher speeds.
  So, adjust border warning widths accordingly.

0.00001 degrees latitude is approximately a meter.


########## development Notes ##########

########## Race Committee control program - stadiumRC ##########

stadiumRC startup tries to connect to gpsd. No auto RC position is available
if it does not (lat=90, lon=0 is reported if gpsd is not connected.) So

1/ start gpsd (-n don't wait for device)
   With gps puck in laptop usb:
     sudo gpsd -n -S 2947 /dev/ttyACM0 # default port
     sudo gpsd -n -S 2948 /dev/ttyACM0 # Note NOT default port
    (Note that gpsd startup is problematic.)
     and set RCconfig
    test with eg 
    gpsmon 127.0.0.1:2947

   Alternatively, start something like gps2net on phone and set RCconfig 
    (Note that I have not yet got stadiumRC to connect)

    test with eg 
    gpsmon 192.168.2.180:6000


2/ edit RCconfig in startup dir if necessary
3/ possibly edit defaultRace  in RC startup dir

4/ start stadiumRC (in some directory (eg RC)
      /path/to/stadiumRC 
   eg
      ../stadiumRC   



########## Individual boat gizmo LED control program - stadiumBT ##########

#####
stadiumBT can be simulated on a laptop with gps. LEDs are not used but
colour status is reported in the console. This needs gpsd started as
above for stadiumRC and then, eg:
    cd boat
   ../stadiumBT   

  (stop with ^c in console)

#####
stadiumBT on a gizmo (raspberryPi) with LEDs:

configure and "burn" micro SD as in PiZeroWnotes.txt

plug in micro SD
plug in gps puck
power up

When working, this should start up software, poll gps,  and begin 
checking with RC for course info.


## debugging ##
(discover Pi IP by connecting to monitor or looking at wifi hub)
Connect from laptop to Pi. user/password as set in PiZeroWnotes.txt
(May not be needed if keys are set.)
Vcourse/ from github is useful for development, but may need lots of pulling.

Look at file ~/runAtBoot  for current version of startup instructions.

