
Notes on using  Pi Zero W v1.1  with  2017-07-05-raspbian-jessie-lite

Burn the image to microSD card. (usb worked better than SD slot on my laptop)

Image 2017-07-05-raspbian-jessie-lite has user pi, password raspberry.

Using raspi-config (or otherwise):
  -set/change pi user passwd and root passwd
  -change the computer name to BT. Boats will be distinguished by config file
      and different host names make replication of SD more difficult. 
  -turn on wifi connection to  a network (see below, or a local network for now
     to update (edit /etc/wpa_supplicant/wpa_supplicant.conf)
  -turn on sshd
  -possibly configure ssh keys but beware the image will distribute the private
     key on each SD copy, so create a private key for this purpose, don't use 
     one that you would really like to keep private.
  -update system

reboot

At this point you could ssh and work from a desktop to get thing set up.

Old firmware may cause problem for non-root access to GPIO. Following
https://raspberrypi.stackexchange.com/questions/40105/access-gpio-pins-without-root-no-access-to-dev-mem-try-running-as-root

do

rpi-update # firmware and kernel modules update for GPIO fix
*** If no errors appeared, your firmware was successfully updated to 20ba6ed25ef3600c8ee5db74fe58b12affb7ea53

apt-get update
apt-get upgrade ?? (suggested but I didn't yet)
reboot

useradd -m bt 
passwd bt xxxxxx  # or something better
adduser bt gpio  # so bt can turn LEDs on/off

apt-get install python3  python3-tk
apt-get install gpsd  python-gps  gpsd-clients 
apt-get install gpsd-cdbg  # not sure if this is needed,  for compiling?? 
apt-get install python3-rpi.gpio

apt-get install git # if doing development

apt-get install python3-pip # try avoiding this, it installs lots extra I think
pip3  install  gpsd-py3

  Downloading gpsd-py3-0.2.0.tar.gz
  Running setup.py (path:/tmp/pip-build-3n9tq5bo/gpsd-py3/setup.py) egg_info for package gpsd-py3
    Installing collected packages: gpsd-py3
  Running setup.py install for gpsd-py3
  Installing collected packages: gpsd-py3
  
  chmod g+rw /dev/gpiomem

No longer as root, run python3 and check

   import json, socket, threading, logging, time, math, tkinter, gpsd

See additional notes in gpsNotes.txt if there are problems with the next.

plug in gps usb and check
  lsusb  # should show  ... U-Blox AG 
  dmesg | tail # should show it mounted (eg USB ACM   ttyACM0 )
  cat /dev/ttyACM0     #should show data, directly from device not from gpsd
  gpsmon /dev/ttyACM0  #should show data, directly from device not from gpsd

  gpsmon 127.0.0.1     suppose to acces deamon, but have noy got something right
  gpsmon 127.0.0.1:2947  (the same, 2947 is default port

If you get  Permission denied then, as root, you need to (assuming ttyACM0 was indicated above)
   chmod 0666 /dev/ttyACM0  
so that you do not need to be root to access the gps. Then so the change persists after reboot, 
create (or edit) a new rule file  /etc/udev/rules.d/99-gps.rules   with the line

KERNEL=="ttyACM0", MODE="0666"

(I don't think 99 in the file name is especially important in this case.)

sign on as bt

The python code uses gpsd so as root
   systemctl start gpsd
   systemctl enable gpsd
   
 or run manually on NON STANDARD PORT  as root DOES NOT SEEM NEEDED??
   systemctl stop gpsd
   systemctl disable gpsd

   gpsd  -S 2948 /dev/ttyACM0  #-S 2947 is default port

Run python3 and check

import gpsd
gpsCon = gpsd.connect(host="127.0.0.1", port=2947) 
gpsCon = gpsd.connect(host="127.0.0.1", port=2948) #default 2947
z = gpsd.get_current() # WORKS ON NON STANDARD PORT  <GpsResponse No mode> means not yet ready
z
z.time.format("%a, %d %b %Y %H:%M:%S +0000")  NOT

Generate a configuration file BTconfig that looks something like

{"BT_ID": "boat 1","RC_IP": "10.42.0.1",  "RC_PORT": "9001", "GPS_HOST": "127.0.0.1",  "GPS_PORT": 2948 }

The RC_IP will depend on the network configuration

##############  network  ############

The Pi needs to connect to an access point (AP), at least until I figure out a
mesh network. Setup an AP or hotspot, possibly on the laptop used for RC. Then on the Pi (as root) edit file /etc/wpa_supplicant/wpa_supplicant.conf to
something like

country=CA
#country=GB
#ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
#update_config=1

# higher priority is more preferable

network={
   ssid="OnWaterNetwork"
   psk="someSecret"
   key_mgmt=WPA-PSK
   priority=10
#   id_str="possibly RC"
}

The ssid, pskm and key_mgmt fields should correspond to settings on the AP. 
I am not sure about fields update_config and ctrl_interface. 
I commented them out while trying to debug, but I'm not sure if they were 
the cause of problems.


##############  make it autostart at boot  ###############

In /home/bt make a script runAtBoot  with lines

UPDATE THIS WHEN WORKING PROPERLY

#!/bin/bash
echo up at `date` >> bootTime
# should not need to start gpsd, but ...
head /dev/ttyACM0 # to see if it is working
gpsd  -n -S 2948 /dev/ttyACM0  #-S 2947 is default port
sleep 20 # let gps get fix
export PYTHONPATH=/home/bt/Vcourse/lib
/home/bt/Vcourse/stadiumBT & 
echo   runAtBoot finished 

The & above is necessary to daemonize the job. 
Environment variables must be set as cron does not use .bashrc.

Give runAtBoot execute permission and in crontab add
@reboot ./runAtBoot >/home/bt/cron.log


##############  Clean up for non-development SDs ###############

rm track.txt cron.log  stadiumBT.log BTraceObj.json

remove  keys in .ssh directory if used for git !!!
apt-get remove git # and some other things??

clean up Vcourse/  but leave files needed for execution.

On RC, not on BT:
clean up RC/distributedCourses/*  


##############  replicating SDs for other BT gizmos  ############

This is for identical hardware. Go through process above if the hardware is not 
identical. It also requires an SD of the same size, there is no auto-expansion.

Coping the good, clean, BT SD created above to an image file and then to other SD cards can be done as follows. This process uses 'dd'. Note that 'dd' can ruin a whole device, not just one file system, and not
just clobber some important files, so do this CAREFULLY and pay special 
attention to having the output of=device correct. It also must be used as root.

Be sure there is enough space on the computer drive. A 16 GB card will create a 16 GB file even if the card is not filled. There is no compression.

Insert the BT SD card into a computer (USB possibly works better than SD slot?)
Check the device letter, for example with 'df' and umount and file systems. Likely there will be two or more file systems, one called boot.

   sudo umount /dev/sdc1(eg)
   sudo umount /dev/sdc2(eg)

CAREFULLY and paying special attention to having the output of=device correct

    sudo dd  bs=4M  if=/dev/sdc(eg) of=PiZeroW-BT.img 
    sudo sync

Note there is no partition number after sdc. This will take time, possibly 20+ minutes for a 16GB SD card. It appears frozen even though it is working.

Remove the BT SD card and insert an empty SD card into the computer.
(It does not need to be empty, but everything on it will be overwritten.)
Copying the image to an SD card with dd does not require the SD card to be formatted but formatting is a way to set the volume label.

Run df -h to see what devices are mounted, note the SD device (eg /dev/sdc1) 
and then unmount it.
 
   sudo umount /dev/sdc1(eg)
   sudo umount /dev/sdc2(eg)

   sudo dd  bs=4M if=PiZeroW-BT.img  of=/dev/sdc(eg)
   sync  #ensure the write cache is flushed

Change BT_ID in BTconfig. This could be done by ssh (to find IP address try
 arp -a -i wlan0 , or by connecting monitor/keyboard.
 But the simplest may be to just stick the SD back in the computer, which now mounts the SD file systems, and find .../home/bt/BTconfig. It will be necessary to edit as root since user IDs are different on the comuter. 
