https://spellfoundry.com/2016/05/29/configuring-gpio-serial-port-raspbian-jessie-including-pi-3/

https://www.raspberrypi.org/forums/viewtopic.php?t=187386&p=1183130

https://github.com/uraimo/SwiftyGPIO/wiki/GPIO-Pinout

https://raspberrypi.stackexchange.com/questions/9481/gpio-why-wire-button-to-ground-rather-than-3-3v

Big Dan the Blogging re GPS Manhttps://bigdanzblog.wordpress.com/2015/01/18/connecting-u-blox-neo-6m-gps-to-raspberry-pi  

Python3 GPSD client
https://github.com/MartijnBraam/gpsd-py3


##################################################

Dynamic differential GPS:

https://rtklibexplorer.wordpress.com/tag/neo-m8n/page/7/

https://rtklibexplorer.wordpress.com/2016/11/25/selecting-a-gps-receiver-m8n-vs-m8t/

http://grauonline.de/wordpress/?page_id=1468

##################################################

On BT, if
     gpsmon  127.0.0.1:2947
shows data then all is working correctly. Following instructions are for
the case when there are problems.

##################################################
CLEANUP FOR CASE OF USB GPS vs SERIAL
   usb     /dev/ttyACM0
   serial  /dev/ttyAMA0
 ls -l /dev
lrwxrwxrwx 1 root root           7 Sep 21 02:17 serial1 -> ttyAMA0
    possibly serial0,  possibly-> ttyS0

[ not sure
 /dev/ttyAMA0 is linked to the getty (console) service, so:
$ sudo systemctl stop serial-getty@ttyAMA0.service
$ sudo systemctl disable serial-getty@ttyAMA0.service
]

[ not sure  serial0  vs serial1 ??
Remove the console from the cmdline.txt, edit  /boot/cmdline.txt and
remove the: console=serial0,115200   ???  UNDO ???
and reboot
]

   sudo stty -F /dev/ttyAMA0 9600  # start serial port (not necessary ? )
   sudo gpsd /dev/ttyAMA0 -F /var/run/gpsd.sock  # start deamon Pi 2

[    1.068316] 20201000.serial: ttyAMA0 at MMIO 0x20201000 (irq = 81, base_baud = 0) is a PL011 rev2


     gpsmon 
     gpsmon  /dev/ttyAMA0
     gpsmon  /dev/serial1 

##################################################



Typically the boot process should start gpsd (when all works correctly)
  service --status-all # will show + for gpsd if it is running
or
  service --status-all | grep gpsd

Howeever, it can be running but not working. I had to edit /etc/default/gpsd to

DEVICES="/dev/ttyACM0"
GPSD_OPTIONS="-n"

Then
   systemctl daemon-reload; systemctl reenable gpsd.service
This and more troubleshooting hints are in section Ubuntu/Debian of http://www.catb.org/gpsd/troubleshooting.htm

The service and whether it is enabled on boot is controlled by
   sudo systemctl stop gpsd
   sudo systemctl stop gspd.socket
   sudo systemctl disable gpsd
   sudo systemctl enable gpsd
   sudo systemctl start gpsd
   sudo systemctl daemon-reload
   sudo systemctl reenable gpsd.service

   systemctl status gpsd


Verify actual gps device to use with
  dmesg | tail

Assuming gps shows gps on /dev/ttyACM0  (eg USB ACM   ttyACM0 ), the command
line gpsd start up for default port 2947 and gps usb 
plugged in on /dev/ttyACM0 is
   gpsd  /dev/ttyACM0   # possibly as root ??

verify
  ps -elf | grep gps

If not, check
  lsusb  # should indicate U-Blox AG or other GPS device

There seems to be a difficulty between hotplug and usb gps at boot up in 2017-07-05-raspbian-jessie-lite and several other OS releases as the switch
to systemd is causing headaches. gpsd is started (by gspd.socket?) when gps is pluggged into usb (and fails with device busy)

If 
   cat /dev/ttyACM0
and
   gpsmon  /dev/ttyACM0
shows data but
   gpsmon
   gpsmon  localhost
   gpsmon  127.0.0.1:2947

do not, then the problem is probably gpsd startup or hotplug

(with X it shoud also be possible to run xgps or cgps and show data from gpsd.)

BTW
gpsmon -L # lists a table showing which GPS device types gpsmon has
       built-in support for, and which generic commands can be applied...

****************  connect RC to phone GPS with Share GPS ###############
  -connect phone to RC wifi
  -start GPS and Share GPS

  -Start Share GPS and set connection data type:NMEA  method:  TCP/IP NMEA gpsd 
  server port 2947 (default), select to listen for incoming connections.
    (Edit can be used to verify settings - press and hold connection)
 
  -press briefly the connetion to start it listening

  Both this
      gpsmon  10.42.0.183:2947
  and this
      gpsd -S 2950  -D 3 -N  tcp://10.42.0.183:2947
      gpsmon  127.0.0.1:2950
  work, but not at the same time. The free version of Share GPS only supports
  one connecting device at a time. It also seems necessary to stop the app so
  that it loses the old connection.
  
  However, I could not get python to read 10.42.0.183:2947 directly. It still
  needs the local server.
  Also, there seem to be a lot of Ill-formed packets and the connection is
  unstable.
  (Not sure why, with local server starting stadiumRC before gpsmon seems to
   work better.)

  -press (briefly or hold?) the GPS symbol too start GPS

With gspd mode rather than NMEA data is flowing, but something is wrong format?

****************  connect RC to phone GPS with GPS2Net ###############
(I have had trouble with  GPS2Net disappearing when the phone screen locks.
 Share GPS described above does no do that.)
  
  -connect phone to RC wifi
  -start GPS and GPS2Net
  -note the port (6000) and IP address (under share)

  -on the RC computer test with gpsmon, eg
      gpsmon  10.42.0.223:6000
  
  -because stadiumRC fails connecting to phone (python module bug?), 
    start gpsd (sudo seems optional) and direct it to the phone, eg
      gpsd    tcp://10.42.0.223:6000
    or with debug and no deamonize
      gpsd  -D 3 -N   tcp://10.42.0.223:6000

    The IP and port above are those of the phone. The gpsd will get data from
    it, but listen on default 127.0.0.1:2947 and pass data along to connecting
    clients. (stadiumRC python seems to like gpsd better than GPS2Net.)

    If it can't bind to IPv4 port gpsd, "Address already in use"
    (You can see what process with    netstat -pant | grep 2947   )
    You could try to stop the process, or just use a non-default port:

      gpsd -S 2948 tcp://10.42.0.223:6000  # uses 127.0.0.1 port 2948
      gpsd -S 2950 tcp://10.42.0.183:6000  # uses 127.0.0.1 port 2950
    or with debug and no deamonize
      gpsd -D 3 -N -S 2948 tcp://10.42.0.223:6000

  -test with gpsmon, eg
      gpsmon  127.0.0.1:2947
      gpsmon  127.0.0.1:2948


  -edit RCconfig to indicate the GPS port if changed (IP is that of the gpsd 
      running on the RC machine (127.0.0.1)

  -(re)start stadiumRC # Note that the first click on "get RC GPS" might 
     return (0,0) as the connection or GPS seem to take awhile to wake up.
     Try again after a few seconds.

********   note on systemd services  (esp gpsd) ###############

Note that it can be difficult to shut down the  gpsd servicestarted on boot, 
socket connections will keep restarting it. If stadiumBT is running then it gets 
activated by gpsd.socket calls. Hotplug may also have a affect?
(And NB, if stadiumBT is set to automatically start on boot then it will be
running if it has not been killed.)

Use these to  check / stop
  ps -elf | grep gps
  systemctl status  gpsd
  service --status-all | grep gpsd

  systemctl stop gpsd
  systemctl disable gpsd
  ps -elf | grep gps

  killall gpsd
  rm /var/run/gpsd.sock  #Remove any sockets gpsd left
  [  lsof -n | grep /dev/ttyACM0 ]

and retart 
  systemctl start gpsd
  systemctl enable gpsd

and check
  tail /var/log/syslog

********   exposing  GPS   ###############
See
  http://www.catb.org/gpsd/troubleshooting.html under Ubuntu/Debian

and esp. regarding using  -G at boot see
  https://lists.gnu.org/archive/html/gpsd-users/2017-03/msg00010.html

amd general background on sockets at
  https://askubuntu.com/questions/817294/systemd-init-bind-to-port


gpsd will listen on  all addresses with -G. 
   gpsd -G -S 2947 -N  -n /dev/ttyACM0 # [ -N Don't daemonize for debugging ]

This will allow anyone on the network (e.g. RC) to obtain gps info. (There is an
obvious security question.) Test with gpsmon from a remote system using:

    gpsmon tcp://10.42.0.10:2947   # e.g.

To expose at system  boot startup,  
   cp /lib/systemd/system/gpsd.socket /etc/systemd/system/gpsd.socket
and  in the copy modify  127.0.0.1:2947 to 0.0.0.0:2947 
and see https://lists.gnu.org/archive/html/gpsd-users/2017-03/msg00010.html
for some additional possible changes.

Then edit /etc/systemd/system/gpsd.service as in above link so 
that /etc/default/gpsd is not used, or edit /etc/default/gpsd to 
add GPSD_OPTIONS="-G -S 2947 -n"

Then
    systemctl stop gpsd
    systemctl daemon-reload
    systemctl enable gpsd
    systemctl start gpsd
    tail /var/log/syslog 

and if it failed for socket already in use then go through the steps above
(in note on systemd services) to make sure all gpsd instances are stopped.

Reboot the system and check
  netstat -lpn

When start/stopping gpsd the warning 
 insserv: warning: current ... of script `gpsd' overrides LSB defaults ...
seems to be harmless.

********   GPS devices disconnecting  ###############

(Following is on laptop with stadiumRC and somewhat less reliably on Pi with gpsmon. 
 with python gpsd on Pi there is some caching) 
If a gps device disappears (e.g unplugged or inside building) the gpsd deamon drops it 
and does not automatically re-connect when it starts working again. 

This fixes it when it is working again: 

   [sudo gpsdctl remove  /dev/ttyACM0 ]    # e.g. happens automatically
   sudo gpsdctl add /dev/ttyACM0           # e.g.
or
   sudo gpsdctl add tcp://10.42.0.74:6000  # e.g.

The same problem occurs when a USB gps is unplugged. Hotplug is suppose to do
the gpsdctl add but there appears to be a conflict/issue.

The gpsdctl command needs to run with the same permissions as the gpsd was
started with.  (And the GPSD_SOCKET environment variable indicating the control
socketdefaults to /var/run/gpsd.sock  for root and /tmp/gpsd.sock otherwise.)

********  multiple GPS devices with GPS2Net or Share GPS###############

It is possible to have multiple phones/tables on the network. Each would have its
own IP address, but channeling through gpsd each gets it's own local port, eg:

 with gps2net
      gpsd -S 2948 tcp://10.42.0.223:6000  # uses 127.0.0.1 port 2948
      gpsd -S 2950 tcp://10.42.0.183:6000  # uses 127.0.0.1 port 2950

 with Share GPS
      gpsd -S 2948 tcp://10.42.0.183:2947 # uses 127.0.0.1  port 2948
      gpsd -S 2950 tcp://10.42.0.223:2947 # uses 127.0.0.1  port 2950

then
  -test with gpsmon, eg
      gpsmon  127.0.0.1:2948
      gpsmon  127.0.0.1:2950

I have been able to use "Other GPS" in stadiumRC to read these. A gpsList
file for this example might have lines
  RC      127.0.0.1  2948
  phone   127.0.0.1  2950

****************  CLEANUP BELOW ###############
netstat -l
tcp        0      0 localhost:gpsd          *:*                     LISTEN  
... and  LISTENING     25544    /var/run/gpsd.sock

netstat -pant |grep 2947
tcp        0      0 127.0.0.1:2947          0.0.0.0:*               LISTEN      -               
tcp6       0      0 ::1:2947                :::*                    LISTEN      -

 netstat -lnpt
 
more /etc/default/gpsd
more /lib/systemd/system/gpsd.socket

 
check hotplug issues run
 tail -f /var/log/syslog
and plug, unplug usb gps mouse

sudo killall gpsd ??
http://www.catb.org/gpsd/troubleshooting.html
run xgps or cgps. #should show data from gpsd
# sudo gpsd -N -D3 -F /var/run/gpsd.sock
# sudo gpsd -D 5 -N -n /dev/ttyACM0

 -n  don't wait
 -N  don't deamonize
 -D  debug level
 
 see man gpsd re UPP/TCP gpsd://  feeds
 

lsof -i4
lsof -i:2947
# sudo gpsd -D 5 -N -n /dev/ttyACM0
Problem seems to be that systemd grabs loaclhost:2947 and does not release it,
so gpsd reports "Device or resource busy" and fails.
Starting on another port works.
  sudo gpsd -D 5 -N -n -S 2948 /dev/ttyACM0  #-S 2947 is default port
  sudo gpsd  -S 2948 /dev/ttyACM0  #-S 2947 is default port
  xgps 127.0.0.1:2948
